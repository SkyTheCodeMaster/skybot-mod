plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceSets {
    data
    main.resources {
        srcDirs += data.resources.srcDirs
        exclude '.cache/'
    }
}

print "Java: ${System.getProperty('java.version')}"
print ", JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})"
println ", Arch: ${System.getProperty('os.arch')}"

minecraft {
    mappings channel: 'parchment', version: '2022.08.14-1.19.2'

    runs {
        configureEach {
            workingDirectory project.file('run/' + it.name) as File

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            ideaModule "${project.name}.main"
            mods.register('skybot' as String) {
                source sourceSets.main as SourceSet
            }

            lazyToken('minecraft_classpath') {
                configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        client {
        }

        server {
        }

        data {
            args '--mod', 'skybot', '--all'
            args '--output', sourceSets.data.resources.srcDirs[0].toString()
            args '--existing', sourceSets.main.resources.srcDirs[0].toString()

            ideaModule "${project.name}.data"
            mods.named('skybot' as String) {
                sources sourceSets.main as SourceSet, sourceSets.data as SourceSet
            }
        }
    }
}

configurations {
    //compile.exclude module: "org.slf4j"
    //runtime.exclude module: "org.slf4j"

    library
    implementation.extendsFrom library

    dataImplementation.extendsFrom implementation
}

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:1.19.2-43.2.6"

    library(group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.5.3') {
        exclude module: 'slf4j-api'
    }

    dataImplementation sourceSets.main.output
}

java {
    version="1.0"
    archivesBaseName = "skybot"
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
}

var manifestAttributes = [
        "Main-Class"              : "com.skythecodemaster.skybot",
        "Specification-Title"     : "skybotmod",
        "Specification-Vendor"    : "skythecodemaster",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.jar.archiveVersion,
        "Implementation-Vendor"   : "skythecodemaster",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
] as LinkedHashMap

tasks.withType(Jar).configureEach {
    manifest.attributes(manifestAttributes)
    includeEmptyDirs false
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    // Normalize line endings from CRLF to LF
    filesMatching('META-INF/mods.toml') {
        //noinspection UnnecessaryQualifiedReference
        filter(org.apache.tools.ant.filters.FixCrLfFilter.class,
                eol: org.apache.tools.ant.filters.FixCrLfFilter.CrLf.newInstance('lf'))
    }
}

tasks.named('jar', Jar).configure {
    finalizedBy 'reobfJar'
    archiveClassifier.set('lite')
}
@SuppressWarnings('GrMethodMayBeStatic')
def relocate(origin) {
    shadowJar.relocate(origin, "com.skythecodemaster.skybot.shadow.$origin")
}

// noinspection UnnecessaryQualifiedReference
tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar).configure {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    archiveClassifier.set('')

    configurations = [ project.configurations.library ]

    exclude 'module-info.class'

    finalizedBy 'reobfShadowJar'

    archiveFileName = "skybot-${minecraft_version}-${mod_version}.jar"
}

tasks.named('assemble') {
    dependsOn shadowJar
}

reobf {
    shadowJar {}
}

// Without these two, Gradle will issue warnings about task inputs from other tasks outputs without declaring dependencies
tasks.named('reobfShadowJar') { dependsOn tasks.named('jar') }
tasks.named('shadowJar') { dependsOn 'reobfJar' }

// noinspection UnnecessaryQualifiedReference
tasks.withType(net.minecraftforge.gradle.userdev.tasks.RenameJarInPlace).configureEach {
    // Check if the tool is SpecialSource, just in case FG changes to using ForgeAutoRenamingTool in the future
    if (it.tool.get().contains('SpecialSource')) {
        args.add('--stable')
    }
}

/*publishing {
    publications.create('mavenJava', MavenPublication) {
        it.from components.java

        it.artifactId = project.name
        it.version = "$mc_version-${versions.rawVersion}${versions.snapshot ? '-SNAPSHOT' : ''}"

        // Modifies POM by removing the '_mapped_' part of dependency versions
        it.pom { MavenPom pom ->
            pom.withXml { xml ->
                var xmlElement = xml.asElement()
                try {
                    // Selects the 'version' child element of any 'dependency' element
                    var xPath = XPathFactory.newInstance().newXPath().compile("//*[local-name()=\"dependency\"]/*[local-name()=\"version\"]")
                    NodeList versionNodes = (NodeList) xPath.evaluate(xmlElement, XPathConstants.NODESET)
                    for (int i = 0; i < versionNodes.length; i++) {
                        var node = versionNodes.item(i)
                        var mappedIdx = node.textContent.lastIndexOf("_mapped_")
                        if (mappedIdx != -1) {
                            node.setTextContent(node.textContent.substring(0, mappedIdx))
                        }
                    }
                } catch (Exception e) {
                    project.logger.error("Error attempting to modify pom file", e)
                }
            }
        }
    }

    repositories {
        maven {
            name 'projectLocal'
            url "file://${project.file('repo').absolutePath}"
        }
    }
}
*/